% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dbscan.R
\name{dbscan}
\alias{dbscan}
\title{dbscan}
\usage{
dbscan(data = NULL, neighbors = NULL, edges = NULL, eps,
  minPts = nrow(data) + 1, partition = !missing(edges),
  verbose = getOption("verbose", TRUE))
}
\arguments{
\item{data}{Input data, where examples are columns.}

\item{neighbors}{An adjacency matrix of the type produced by \code{\link{randomProjectionTreeSearch}}}

\item{edges}{A weighted graph of the type produced by \code{\link{buildEdgeMatrix}}.}

\item{eps}{See \code{\link[dbscan]{dbscan}}.}

\item{minPts}{Minimum size of a cluster.'}

\item{partition}{If \code{TRUE}, attempt to calculate an approximate silhouette so the object returned is also
of class \code{\link[cluster]{partition.object}}, for compatibility with the \code{cluster} package.}

\item{verbose}{Verbosity level.}
}
\value{
An \code{\link[dbscan]{dbscan}} object.
}
\description{
An implementation of the dbscan algorithm.
}
\details{
This is a preliminary implementation of the OPTICS algorithm that attempts
to leverage the \code{largeVis} nearest-neighbor search.

One of \code{neighbors} or \code{edges} must be specified. If \code{edges} is missing,
\code{data} must also be given. If \code{data} is given along with either \code{edges}
or \code{neighbors}, the algorithm will attempt a more thorough search.
}
\note{
Support for dbscan and optics are preliminary, and not fully tested for
correctness.

This is not the original DBSCAN algorithm. In particular, the neighbor-search strategy in
DBSCAN is not used, in favor of using a pre-calculated neighbor matrix produced incidentally by
`largeVis`.
}

